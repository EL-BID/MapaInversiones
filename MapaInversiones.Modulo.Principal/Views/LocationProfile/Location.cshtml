@model PlataformaTransparencia.Modelos.ModelHeaderLocalitacionProfileData

@inject OrchardCore.IOrchardHelper Orchard
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    System.IFormatProvider cultureMoneda = new System.Globalization.CultureInfo("es-CO");
}

<body>
    <section class="banner-main-section s0-section" style="background-image: url(@Model.UrlImage)">
        <div class="bgBlueOverlay">&nbsp;</div><!-- DON'T EREASE-->
        <div class="container">
            <!-- Begin bread crumbs -->
            <nav class="bread-crumbs mb-5">
                <div class="container">
                    <div class="row">
                        <div class="col-12">
                            <ul class="bread-crumbs-list">
                                <li>
                                    <a href="\">Inicio</a>
                                    <i class="material-icons md-18">chevron_right</i>
                                </li>
                                <li><a href="#!">Localización</a><i class="material-icons md-18">chevron_right</i></li>
                                <li></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </nav>
            <!-- End bread crumbs -->
            <div class="row justify-content-center">

                <!-- intro map-->
                <input type="hidden" id="locationId" value=@Model.LocationId />
                <input type="hidden" id="typeLocationId" value=@Model.Type />
                <div class="col-md-12 text-center">
                    <h1 class="mainTit_t1 text-center" id="nomLocation">@Model.Name </h1>
                    <div class="banner-main-desc">
                        <span class="h6 sub_t1_red text-center" id="typeLocation"><b>@Model.NameType</b></span>
                    </div>
                </div>
                <div class="col-md-6 text-center">
                    <ul class="list-inline details">
                        @if (@Model != null)
                        {
                            <li>
                                <span class="h2">@String.Format(cultureMoneda, "{0:n0}", @Model.NumberProjects)</span>
                                <span>Número de proyectos</span>
                            </li>
                            <li>
                                <span class="h2">@String.Format(cultureMoneda, "{0:n2}", @Model.AverageDurationProjects*12) Meses</span>
                                <span>Duración promedio del proyecto</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="row navs-shortcuts">
                <div class="" id="navs-header">
                    <a class="btn-section" href="#s0">
                        <span class="ic-shortcut"><span class="material-icons md-24">travel_explore</span></span>
                        <span class="text-btn">Información general</span>
                    </a>
                    <a class="btn-section" href="#s1">
                        <span class="ic-shortcut"><i class="material-icons md-24">dashboard</i></span>
                        <span class="text-btn">Proyectos</span>
                    </a>
                </div>
            </div>
        </div>
    </section>
    <!--INFORMACION GENERAL-->
    @if (Model != null && Model.IsProvince)
    {
        <section class="section" id="s0"></section>
    }
    <!--PROYECTOS-->
    <section class="section" id="s1">
        <div class="container">
            <div class="section-heading heading-left">
                <h2>Proyectos</h2>
            </div>
            <!--Tabs-->
            <div class="tabs goals">
                <ul id="tabTipoProyectos" class="tabs-nav">
                    <li id="projectsBySector" class="link_project_by_type active">
                        <div class="goal-number"></div>
                        <div class="goal-name"><div class="h4">Proyectos por sector</div></div>
                    </li>

                </ul>

                <div id="contentTabTipoProyecto" class="tabs-container">
                    <div class="tabs-item content active">
                        <div class="graphWrap py-3" id="divGraphProy"></div>
                        <div class="section-heading heading-left">
                            <div class="row">
                                <div class="col-lg-8"><h3 id="typeProjectTitle"></h3></div>
                                <div class="col-lg-2">
                                    <input type="hidden" id="sectorSelected" value='' />
                                    <input type="hidden" id="functionalGroupSelected" value='' />
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label for="sel-estado" id="stateLabel" class="small">Entidad</label>
                                        <select class="form-select" aria-label="Selecciona un estado" id="entitiesProject" onchange="entitiesProjectChanged()">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="comparativeTable" id="divListadoProyectos">
                        </div>
                        <!--PAGINACION: en caso el listado sea superior a 12 items aparece la paginación-->
                        <div id="divPaginator"></div>
                        <div class="comparativeTable" id="showMessageGraph">
                            No hay datos disponibles para ver
                        </div>
                    </div>
                </div>

                <!--CIERRE DE TABS GOALS-->
            </div>
        </div>
    </section>
 
    <!--SECCION DISTRITOS-->
  @*  <section class="section section-bg3" id="s2"></section>*@
    <style>
        .container-linkMap path:hover {
            fill: #6ECAE4;
            stroke: #0171bb;
            stroke-width: 3px;
            transition: fill 0.4s;
        }
    </style>
    @section scripts
    {
        <script src="~/js/jquery/jquery-ui.min.js"></script>
        <script src="~/Content/dist/js/lib/D3/d3.min.js" charset="utf-8"></script>
        <script src="~/content/dist/js/lib/D3/d3plus.js"></script>
    }
    
    <script>
        var typeProjectList = 'projectsBySector';
        var dataLocation;
        //var projectsByFiltersYearStatus;
        var projectsByFiltersEntity;
        var actualPage = 1;
        var totalByPage = 10;
        var finishData = 0;
        var initData = 0;
        Number.prototype.formatMoney = function (c, d, t) {
            var n = this,
                c = isNaN(c = Math.abs(c)) ? 2 : c,
                d = d == undefined ? "." : d,
                t = t == undefined ? "," : t,
                s = n < 0 ? "-" : "",
                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
                j = (j = i.length) > 3 ? j % 3 : 0;
            return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        };
        getInformationByTypeLocationAndLocationIdAndYearAndJurisdiction();
        tabProjectSelected();
        function tabProjectSelected() {
            $('.link_project_by_type').on('click', function () {
                typeProjectList = this.id;
                if (typeProjectList == "projectsBySector") {
                    getDivGraphProySector(dataLocation.projectsBySector, dataLocation.projectsByLocation);
                    $("#projectsByFuntionalGroup").removeClass('link_project_by_type active');
                    $("#projectsByFuntionalGroup").addClass('link_project_by_type');
                    $("#projectsBySector").removeClass('link_project_by_type');
                    $("#projectsBySector").addClass('link_project_by_type active');
                }
                else {
                    getDivGraphFunctionalGroup(dataLocation.projectsByFunctionalGroup, dataLocation.projectsByFunctional);
                    $("#projectsBySector").removeClass('link_project_by_type active');
                    $("#projectsBySector").addClass('link_project_by_type');
                    $("#projectsByFuntionalGroup").removeClass('link_project_by_type');
                    $("#projectsByFuntionalGroup").addClass('link_project_by_type active');
                }
            });
        }
        function clearDivLocationProfile() {
            $("#divListadoProyectos").empty();
            $("#typeProjectTitle").empty();
            $("#divGraphProy").empty();
            $("#linkDistrict").show();
        }
        function getInformationByTypeLocationAndLocationIdAndYearAndJurisdiction() {
            var jurisdictionId = $("#jurisdiction").val() == undefined ? "0" : $("#jurisdiction").val();
            $.ajax({
                contentType: "application/json; charset=utf-8",
                url: "../api/ServiciosLocationProfile/GetDetailLocationProfileByLocationIdAndTypeLocation",
                type: "GET",
                data: {
                    locationId: $("#locationId").val(),
                    typeLocation: $("#typeLocationId").val(),
                    jurisdictionId: jurisdictionId
                }
            }).done(function (data) {
                dataLocation = data;
                //console.log("data",data);
                $("#s0").empty();
                var geneInfoProjByState = '<div class="container"> <div class="section-heading heading-left"><h2>Información general</h2></div><div class="row py-2 contadores">';
                if (data != undefined && data.totalProjectsByState != null) {
                    data.totalProjectsByState.forEach(x=>{
                        geneInfoProjByState = geneInfoProjByState + getDivGeneralInformacionCard("card h-100 shadow card-entidad b1", x.stateName, x.totalProjects);
                    });
            }
            $("#s0").append(geneInfoProjByState);

        $("#s2").empty();
        if (data.generalInformacion != undefined) {
            if (data.generalInformacion.isChildLocationEnable) {
                $("#linkDistrict").show();
                var locationChilds = '<div class="container">' + getDivNameLocationChild(data.generalInformacion.childLocationName);
                locationChilds = locationChilds + '<div class="row">';
                locationChilds = locationChilds + getDivImageLocationChild(data.generalInformacion.urlImage, $("#typeLocation").text());
                locationChilds = locationChilds + getDivChildLocations(data.locationChilds);
                locationChilds = locationChilds + '</div></div>';
                $("#s2").append(locationChilds);
            }
            $("#provinceByDistrict").append(data.generalInformacion.parentLocationName);
        }
        $("#s3").empty();
        if (data.locationsRelated) {
            $("#linkMoreDistrict").show();
            var locationRelated = '<div class="container">' + getDivNameLocationRelated(data.generalInformacion.parentLocationName);
            locationRelated = locationRelated + '<div class="row">';
            locationRelated = locationRelated + getDivChildLocationsRelated(data.locationsRelated);
            locationRelated = locationRelated + '</div></div>';
            $("#s3").append(locationRelated);
        }
        getDivGraphProySector(data.projectsBySector, data.projectsByLocation);
                    }).fail(function (xhr, ajaxOptions, thrownError) {
            alert("Error w " + xhr.status + "_" + thrownError);
        });
        }
        function getDivGeneralInformacionCard(styleCard, titleCard, totalRegister) {
            let divGeneInfoProjState = '<div class="col-xs-4 col-sm-4 col-md-6 col-lg-3 mb-3">';
            divGeneInfoProjState = divGeneInfoProjState + '<div class="' + styleCard + '"> <div class="card-body"> <div class="wrap-desc-entidad"><div class="h5">';
            divGeneInfoProjState = divGeneInfoProjState + titleCard + '</div> <div class="h1">';
            divGeneInfoProjState = divGeneInfoProjState + totalRegister + '</div></div></div></div></div>';
            return divGeneInfoProjState;
        }
        function getDivTableProjectsByFunctionalGroup(functional, projectsByFunctional) {
            $("#divListadoProyectos").empty();
            $("#typeProjectTitle").empty();
            if (projectsByFunctional != null && projectsByFunctional.length > 0) {
                var entity = $("#entitiesProject").val();
                $("#typeProjectTitle").html('Proyectos para el grupo <span>' + functional + '</span>');
                let existProject = false;
                projectsByFiltersEntity = projectsByFunctional.filter(x => x.grupoFuncional == functional && x.entidadEjecutora == entity);
                if (projectsByFiltersEntity.length > 0) {
                    initData = ((actualPage - 1) * totalByPage);
                    finishData = (actualPage * totalByPage) - 1;
                    var projectsByPage = jQuery.grep(projectsByFiltersEntity, function (n, i) {
                        return (i >= initData && i <= finishData);
                    });
                    if (projectsByPage.length > 0) {
                        existProject = true;
                        $("#divPaginator").show();
                        getDivTableProjectsByFilters(projectsByPage);
                        drawPaginator(actualPage, projectsByFiltersEntity.length);
                    }
                }
                if (!existProject) {
                    $("#divPaginator").hide();
                    var divProjectList = "No hay proyectos para el grupo funcional <b>" + functional + " </b>estado <i>" + status.toLowerCase() + " </i>";//año de ejecución <b>" + year + "</b>";
                    $("#divListadoProyectos").html(divProjectList);
                }
            }
        }
        function getDivTableProjectsByFilters(projectsByPage) {
            var divProjectList = '<div class="card-entidades-group">';
            projectsByPage.forEach(x => { divProjectList = divProjectList + getDivProject(x); });
            divProjectList = divProjectList + '</div>';
            $("#divListadoProyectos").html(divProjectList);
        }
        function drawPaginator(actualPage, totalRegister) {
            var totalPages = (totalRegister > totalByPage) ? ((totalRegister - (totalRegister % totalByPage)) / totalByPage) : 1;
            if ((totalRegister >= totalByPage) && ((totalRegister % totalByPage) > 0)) totalPages = totalPages + 1;
            var actualPag = parseInt(actualPage);
            $("#divPaginator").html("");
            var pagEnlace = "";
            var quotient = Math.floor(actualPag / totalByPage);
            var residue = actualPag % totalByPage;
            var init = 1;
            if (residue == 0) {
                init = (actualPag - totalByPage) + 1;
            } else {
                init = (quotient * totalByPage) + 1;
            }
            var finish = init + (totalPages - 1);
            if (totalPages < totalByPage) {
                finish = totalPages;
            }
            if (finish > totalPages) {
                finish = totalPages;
            }
            if (actualPag > totalByPage && totalPages >= totalByPage) {
                pagEnlace += '<a id="page_left" role="button" class="material-icons md-24" data-page="' + (init - totalByPage) + '"><span class="">chevron_left</span></a>';
            }
            for (var i = init; i <= finish; i++) {
                if (i == actualPag) {
                    pagEnlace += '<span class="pag_actual" data-page="' + i + '"><text>' + i + '</text></span>';
                } else {
                    pagEnlace += '<a class="page_left" role="button" data-page="' + i + '">';
                    pagEnlace += '<span class="glyphicon"></span>';
                    pagEnlace += '<text class="paginacion">' + i + '</text>';
                    pagEnlace += '</a>';
                }
            }
            if (actualPag < totalPages) {
                if (finish < totalPages) {
                    pagEnlace += '<a id="page_right" role="button" class="material-icons md-24" data-page="' + (finish + 1) + '"><span class="">chevron_right</span></a>';
                }
            }
            $("#divPaginator").html(pagEnlace);
            $('#page_right,#page_left,.page_left,.page_right').bind('click', function () {
                actualPage = $(this).attr("data-page");
                $("#divListadoProyectos").empty();
                initData = ((actualPage - 1) * totalByPage);
                finishData = (actualPage * totalByPage) - 1;
                var projectsByPage = jQuery.grep(projectsByFiltersEntity, function (n, i) {
                    return (i >= initData && i <= finishData);
                });
                if (projectsByPage.length > 0) {
                    getDivTableProjectsByFilters(projectsByPage);
                    drawPaginator(actualPage, projectsByFiltersEntity.length);
                }
            });
        }
        function getDivTableProjectsBySector(sector, projectsByLocation) {
            $("#divListadoProyectos").empty();
            $("#typeProjectTitle").empty();
            if (projectsByLocation != null && projectsByLocation.length > 0) {
                var entity = $("#entitiesProject").val();
                $("#typeProjectTitle").html('Proyectos sector <span>' + sector + '</span>');
                let existProject = false;
                projectsByFiltersEntity = projectsByLocation.filter(x => x.nombreSector == sector && x.entidadEjecutora == entity);
                if (projectsByFiltersEntity.length > 0) {
                    initData = ((actualPage - 1) * totalByPage);
                    finishData = (actualPage * totalByPage) - 1;
                    var projectsByPage = jQuery.grep(projectsByFiltersEntity, function (n, i) {
                        return (i >= initData && i <= finishData);
                    });
                    if (projectsByPage.length > 0) {
                        existProject = true;
                        $("#divPaginator").show();
                        getDivTableProjectsByFilters(projectsByPage);
                        drawPaginator(actualPage, projectsByFiltersEntity.length);
                    }
                }
                if (!existProject) {
                    $("#divPaginator").hide();
                    divProjectList = "No hay proyectos para el sector <b>" + sector + " </b>estado <i>" + status.toLowerCase() + " </i>";//año de ejecución <b>" + year + "</b>";
                    $("#divListadoProyectos").html(divProjectList);
                }
            }
        }
        function getDivProject(project) {
            console.log("project",project);
            console.log("project.periodos",project.periodos.length);
            let year= project.periodos!= null && project.periodos.length>0?project.periodos[project.periodos.length-1].id: 1984;//(new Date()).getFullYear();
            console.log("year",year);
            let divProject = '<div id="proj_' + project.idProyecto + '" class="card d-flex">';
            divProject = divProject + '<div class="headEnt"><div class="data1 mainDataProyecto"><span class="small">Código BPIN: </span><span class="small text-bold">' + project.codigoSnip + '</span><br/>';
            divProject = divProject + '<span class="small">Comuna: </span><span class="small text-bold">' + project.nombreMunicipio + '</span><br/>';
            divProject = divProject + '<span class="td1">' + project.nombreProyecto + '</span>';
            divProject = divProject + '</div>';
            divProject = divProject + '<div class="data1"><span class="labelTit">Presupuesto acumulado desde (' + year + ')</span><span class="td1 blueT">$' + project.vlrTotalProyectoTodasLasFuentes.formatMoney(0, ',', '.') + '</span></div>';
            divProject = divProject + '</div>';
            divProject = divProject + '<div class="btn-action">';
            divProject = divProject + '<div class="btnPerfil"><a target="_blank" rel="noopener" href="/projectprofile/' + project.idProyecto + '" class="text-small"><i class="material-icons md-18">arrow_forward</i><br> <span>Ver proyecto</span></a></div>';
            divProject = divProject + '</div></div>';
            return divProject;
        }
        
        function getDivGraphProySector(projectsBySector, projectsByLocation) {
            $("#divGraphProy").empty();
            $("#divListadoProyectos").empty();
            $("#showMessageGraph").hide();
            $("#yearLabel").show();
            $("#yearProject").show();
            $("#stateLabel").show();
            $("#statusProject").show();
            $("#typeProjectTitle").empty();
            $("#entitiesProject").empty();
            $("#sectorSelected").val('');
            $("#functionalGroupSelected").val('');
            //console.log("projectsBySector",projectsBySector);
            if (projectsBySector != undefined && projectsBySector != null) {
                for (var i = 0; i < projectsBySector.length; i++) {
                    projectsBySector[i].value = parseFloat(projectsBySector[i].value);
                    projectsBySector[i].rawValue = parseFloat(projectsBySector[i].rawValue);
                }
                if (projectsBySector.length > 0) {
                   var visualization = d3plus.viz()
                      .container("#divGraphProy")
                      .data(projectsBySector)
                      .type({ "value": "tree_map", "mode": "squarify" })
                      .id({ "value": ["label"], "grouping": true })
                      .depth(1)
                      .size("rawValue")
                      .font({ "family": "inherit" })
                      .format({
                          "text": function (text, params) {
                              if (text == "rawValue") {
                                  return "Proyectos";
                              } else if (text == "label") {
                                  return "Sector";
                              } else if (text == "labelGroup") {
                                  return "Estado";
                              } else if (text == "share") {
                                  return "Participación";
                              } else if (text == "including") {
                                  return "Incluye";
                              } else {
                                  return d3plus.string.title(text, params);
                              }
                          },
                          "number": function (number, params) {
                              return number.toLocaleString("es", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                          }
                      })
                      .background("rgba(255,255,255,0)")
                      .labels({ "align": "left", "valign": "top", "font": { "family": "inherit", "size": 14, "weight": "bold" }, "resize": true })
                      .tooltip(["labelGroup", "label"])
                      .color("label")
                      .color({
                          "scale": ["#2F4556", "#FF3637", "#31655E", "#00C9B1", "#DD1A8B", "#DD4E29", "#D3A034", "#FFB886", "#FFF190", "#80AFE6", "#73323D", "##5B73DD"],
                      })
                      .height({ "max": 419, "small": 200, "secondary": 100, "value": 419 })
                      .legend({
                          "align": "middle",
                          "size": [50, 80],
                          "labels": true,
                          "value": true,
                          "filters": false,
                          "data": true,
                          "order": {
                              "sort": "desc",
                              "value": "size"
                          }
                      })
                      .resize(true)
                      .mouse({
                          "move": true,
                          "click": function (node, viz) {
                              $("#sectorSelected").val(node.label);
                              getYearsAndStatusProjectsBySector(node.label, projectsByLocation);
                          }
                      }).draw();

                    var sectorGreaterParticipation = getSectorGreaterParticipation(projectsBySector);
                    if (sectorGreaterParticipation != '') {
                        $("#sectorSelected").val(sectorGreaterParticipation);
                        $("#functionalGroupSelected").val('');
                        getYearsAndStatusProjectsBySector(sectorGreaterParticipation, projectsByLocation);
                    }
                }
                else {
                    $("#showMessageGraph").show();
                    $("#yearLabel").hide();
                    $("#yearProject").hide();
                    $("#stateLabel").hide();
                    $("#statusProject").hide();
                    $("#entitiesProject").hide();
                }
            }
            else {
                $("#showMessageGraph").show();
                $("#yearLabel").hide();
                $("#yearProject").hide();
                $("#stateLabel").hide();
                $("#statusProject").hide();
                $("#entitiesProject").hide();
            };
        }
        function getYearsAndStatusProjectsBySector(sector, projectsByLocation) {
            if (projectsByLocation != null && projectsByLocation.length > 0) {
                $("#entitiesProject").empty();
                let entities = [];
                for (var i = 0; i < projectsByLocation.length; i++) {
                    if (projectsByLocation[i].nombreSector == sector) {
                        entities.push(projectsByLocation[i].entidadEjecutora);
                    }
                }
                if (entities.length > 0) {
                    entities = entities.map(x => x).filter((value, index, self) => self.indexOf(value) === index);
                    entities.sort();
                    entities.forEach(x => $("#entitiesProject").append('<option value="' + x + '">' + x + '</option>'));
                }
                if (entities.length > 0) {
                    $("#typeProjectTitle").html('Proyectos sector <span>' + sector + '</span>');
                    getDivTableProjectsBySector(sector, projectsByLocation);
                }
            }
        }
        function getSectorGreaterParticipation(projectsBySector) {
            if (projectsBySector == undefined || projectsBySector.length == 0) return '';
            var sectors = projectsBySector.map(item => item.label).filter((value, index, self) => self.indexOf(value) === index);
            let maxSector = 0;
            let rta = '';
            for (var i = 0; i < sectors.length; i++) {
                var projectsInSector = projectsBySector.filter(x => x.label == sectors[i]);
                let totalProjectsInSector = 0;
                projectsInSector.forEach(x => { totalProjectsInSector = totalProjectsInSector + x.rawValue })
                if (totalProjectsInSector > maxSector) {
                    rta = sectors[i];
                    maxSector = totalProjectsInSector;
                }
            }
            return rta;
        }
        function getFuntionalGreaterParticipation(projectsByFuntional) {
            if (projectsByFuntional == undefined || projectsByFuntional.length == 0) return '';
            var functionals = projectsByFuntional.map(item => item.label).filter((value, index, self) => self.indexOf(value) === index);
            let maxFuntional = 0;
            let rta = '';
            for (var i = 0; i < functionals.length; i++) {
                let totalProjectsInFuntional = projectsByFuntional.filter(x => x.label == functionals[i]).length;
                if (totalProjectsInFuntional > maxFuntional) {
                    rta = functionals[i];
                    maxFuntional = totalProjectsInFuntional;
                }
            }
            return rta;
        }
        function getDivGraphFunctionalGroup(projectsByFuntional, projectsByFuntionalGroup) {
            $("#divGraphProy").empty();
            $("#divListadoProyectos").empty();
            $("#showMessageGraph").hide();
            $("#typeProjectTitle").empty();
            $("#entitiesProject").empty();
            $("#sectorSelected").val('');
            $("#functionalGroupSelected").val('');
            if (projectsByFuntional != undefined && projectsByFuntional != null) {
                for (var i = 0; i < projectsByFuntional.length; i++) {
                    projectsByFuntional[i].value = parseFloat(projectsByFuntional[i].value);
                    projectsByFuntional[i].rawValue = parseFloat(projectsByFuntional[i].rawValue);
                }
                if (projectsByFuntional.length > 0) {
                    var visualization = d3plus.viz()
                        .container("#divGraphProy")
                        .data(projectsByFuntional)
                        .type({ "value": "tree_map", "mode": "squarify" })
                        .id({ "value": ["labelGroup", "label"], "grouping": true })
                        .depth(1)
                        .size("rawValue")
                        .font({ "family": "inherit" })
                        .format({
                            "text": function (text, params) {
                                if (text == "rawValue") {
                                    return "Proyectos";
                                } else if (text == "label") {
                                    return "Funcionalidad";
                                } else if (text == "labelgroup") {
                                    return "Funcionalidad";
                                } else if (text == "share") {
                                    return "Participación";
                                } else {
                                    return d3plus.string.title(text, params);
                                }
                            }
                        })
                        .background("rgba(255,255,255,0)")
                        .labels({ "align": "left", "valign": "top", "font": { "family": "inherit", "size": 14, "weight": "bold" }, "resize": true })
                        .tooltip(["label"])   // list the keys to show in tooltip "labelGroup",
                        .color("label")
                        .color({
                            "scale": ["#2F4556", "#FF3637", "#31655E", "#00C9B1", "#DD1A8B", "#DD4E29", "#D3A034", "#FFB886", "#FFF190", "#80AFE6", "#73323D", "##5B73DD"],
                        })
                        .height({ "max": 419, "small": 200, "secondary": 100, "value": 419 })
                        .legend({
                            "align": "middle",
                            "size": [50, 80],
                            "labels": true,
                            "value": true,
                            "filters": false,
                            "data": true
                            , "order": {
                                "sort": "desc",
                                "value": "size"
                            }
                        })
                        .resize(true)
                        .mouse({
                            "move": true,
                            "click": function (node, viz) {
                                getYearsAndStatusProjectsByFuntionalGroup(node.label, projectsByFuntionalGroup);
                            }
                        }).draw();
                    var funtionalGreaterParticipation = getFuntionalGreaterParticipation(projectsByFuntional);
                    if (funtionalGreaterParticipation != '') {
                        $("#sectorSelected").val('');
                        $("#functionalGroupSelected").val(funtionalGreaterParticipation);
                        getYearsAndStatusProjectsByFuntionalGroup(funtionalGreaterParticipation, projectsByFuntionalGroup);
                    }

                }
                else {
                    $("#showMessageGraph").show();
                }
            }
            else {
                $("#showMessageGraph").show();
            }
        }
        function getYearsAndStatusProjectsByFuntionalGroup(functional, projectsByFuntionalGroup) {
            //console.log("projectsByFuntionalGroup", projectsByFuntionalGroup);
            if (projectsByFuntionalGroup != null && projectsByFuntionalGroup.length > 0) {
                //$("#yearProject").empty();
                //$("#statusProject").empty();
                $("#entitiesProject").empty();
                //let years = [];
                //let status = [];
                let entities = [];
                for (var i = 0; i < projectsByFuntionalGroup.length; i++) {
                    if (projectsByFuntionalGroup[i].grupoFuncional == functional) {

                        entities.push(projectsByFuntionalGroup[i].entidadEjecutora);
                    }
                }
              
                if (entities.length > 0) {
                    entities = entities.map(x => x).filter((value, index, self) => self.indexOf(value) === index);
                    entities.sort();
                    entities.forEach(x => $("#entitiesProject").append('<option value="' + x + '">' + x + '</option>'));
                }

                $("#functionalGroupSelected").val(functional);
                if (entities.length > 0) {
                    $("#typeProjectTitle").html('Proyectos grupo funcional <span>' + functional + '</span>');
                    getDivTableProjectsByFunctionalGroup(functional, projectsByFuntionalGroup);
                }

            }
        }
        function getDivChildLocations(locationChilds) {
            let divChildLocations = '<div class="col-lg-6"> <div class="links-container">';
            for (var i = 0; i < locationChilds.length; i++) {
                divChildLocations = divChildLocations + '<div class="card blue-card link-location">';
                divChildLocations = divChildLocations + '<a href="/Location/&type=municipio&id=' + locationChilds[i].id + '"><span class="location-name">' + locationChilds[i].name + '</span>';
                divChildLocations = divChildLocations + '<span class="location-num-proy">(' + locationChilds[i].totalProjects + ')</span>';
                divChildLocations = divChildLocations + '<i class="material-icons md-24">arrow_forward_ios</i></a></div>';
            }
            divChildLocations = divChildLocations + "</div>";
            return divChildLocations;
        }
        function getDivChildLocationsRelated(locationsRelated) {
            let divChildLocationsRelated = '<div class="col-lg-12"> <div class="links-container">';
            for (var i = 0; i < locationsRelated.length; i++) {
                divChildLocationsRelated = divChildLocationsRelated + '<div class="card blue-card link-location">';
                divChildLocationsRelated = divChildLocationsRelated + '<a href="/Location/&type=municipio&id=' + locationsRelated[i].id + '"><span class="location-name">' + locationsRelated[i].name + '(' + locationsRelated[i].totalProjects + ')' + '</span>';
                divChildLocationsRelated = divChildLocationsRelated + '<i class="material-icons md-24">arrow_forward_ios</i></a></div>';
            }
            divChildLocationsRelated = divChildLocationsRelated + "</div>";
            return divChildLocationsRelated;
        }
        function getDivImageLocationChild(urlImageLocation, typeLocation) {
            return '<div class="col-lg-6"><img class="img-fluid py-3" src="' + urlImageLocation + '" alt="' + typeLocation + '"/></div>';
        }
        function getDivNameLocationChild(locationChildName) {
            return '<div class="section-heading heading-left"><h2>' + locationChildName + '</h2></div>';
        }
        function getDivNameLocationRelated(locationChildNameRelated) {
            return '<div class="section-heading heading-left"><h2>Sigue explorando</h2><p class="section-subheading">Otros municipios en ' + locationChildNameRelated + '</p2></div>';
        }
        function jurisdictionChanged() {
            if ($.trim($("#jurisdiction option:selected").text()) == "TODOS") $("#jurisdictionName").hide();
            else {
                $("#jurisdictionName").show();
                $("#jurisdictionName").empty();
            }
            getInformationByTypeLocationAndLocationIdAndYearAndJurisdiction();
        }

        function entitiesProjectChanged() {
            if ($("#functionalGroupSelected").val() != '') getDivTableProjectsByFunctionalGroup($("#functionalGroupSelected").val(), dataLocation.projectsByFunctional);
            else if ($("#sectorSelected").val() != '') getDivTableProjectsBySector($("#sectorSelected").val(), dataLocation.projectsByLocation);
        }
    </script>
</body>

